input {
	beats {
		port => 5044
	}

	tcp {
		port => 5000
	}

	jdbc {
        jdbc_driver_library => "/usr/share/logstash/vendor/jar/jdbc/postgresql-42.2.5.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://192.168.160.1:5432/test_input_db"
        jdbc_user => "postgres"
        jdbc_password => "pgadmin"
        jdbc_validate_connection => true    
        clean_run => false
        record_last_run => true        
        jdbc_paging_enabled => true
        jdbc_page_size => 5000
        tracking_column => "unix_ts_in_epoch"      
        tracking_column_type => "numeric"
        use_column_value => true
        schedule => "* * * * *"  
        statement => [ 
                        "SELECT *, EXTRACT(EPOCH FROM TIMESTAMPTZ(updated_at)) AS unix_ts_in_epoch FROM test 
                        WHERE (EXTRACT(EPOCH FROM TIMESTAMPTZ(updated_at)) > :sql_last_value AND updated_at < NOW()) 
                        ORDER BY updated_at ASC" 
                    ]
    }
}

filter {
  mutate {
    copy => { "id" => "[@metadata][_id]"}
    remove_field => ["id", "@version", "unix_ts_in_epoch"]
  }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		ecs_compatibility => disabled
		index => "rdbms_sync_idx"
		document_id => "%{[@metadata][_id]}"
	}

    jdbc {
            connection_string => "jdbc:postgresql://192.168.160.1:5433/test_output_db"
            username => "postgres"
            password => "pgadmin"
            statement => [ 
                           "INSERT INTO test(code, value, updated_at) 
                            values (?, ?, TO_TIMESTAMP(?, 'YYYY-MM-DD HH:MI:SS.US'))
                            ON CONFLICT(code) DO UPDATE SET code = ?, value = ?, updated_at = TO_TIMESTAMP(?, 'YYYY-MM-DD HH:MI:SS.US')", 
                            "code", "value", "updated_at", 
                            "code", "value", "updated_at" 
                         ]
    }
}
